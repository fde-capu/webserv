# **************************************************************************** #
#                                                                              #
#                                                         :::      ::::::::    #
#    nginx-as-webserv.conf                              :+:      :+:    :+:    #
#                                                     +:+ +:+         +:+      #
#    By: fde-capu <fde-capu@student.42sp.org.br>    +#+  +:+       +#+         #
#                                                 +#+#+#+#+#+   +#+            #
#    Created: 2022/05/20 19:39:02 by fde-capu          #+#    #+#              #
#    Updated: 2022/06/27 16:35:00 by fde-capu         ###   ########.fr        #
#                                                                              #
# **************************************************************************** #

# Needed by nginx, not implemented.
events {}

http {

#	Tell nginx to allways reply as Connection:close.
#	webserv defaults to non-blocking behavior.
	keepalive_timeout 0;

#	Disable Entity Tags to keep a clean header:
	etag off;

#	Serve everything as text/html:
	types
	{
		text/html html htm;
	}

# Able to limit client max_body_size:
# From: https://nginx.org/en/docs/http/ngx_http_core_module.html#client_max_body_size
# Syntax:		client_max_body_size size;
# Default:	client_max_body_size 1m;
# Context:	http, server, location
# Sets the maximum allowed size of the client request body. If the size in a
# request exceeds the configured value, the 413 (Request Entity Too Large)
# error is returned to the client. Please be aware that browsers cannot
# correctly display this error. Setting size to 0 disables checking of
# client request body size.

#	client_max_body_size 50M;

#################################################################

	server
	{
		listen 3490;
		server_name localhost;

		location /
		{
			root html;
			index index.html index.htm;
			autoindex on;
		}
	}

#################################################################

#	First server of localhost:3490 is above, so this is ignored.
#	Conflicting name:port generates ignore warning on nginx starts.

	server
	{
		listen		3490;
		location /
		{
			root	bad_folder;
		}
	}

#################################################################

#	Identify the server block trough server_name.
#	Client must decipt Host header.
#	This also demonstrates that the absence of index defaults to html/htm.

	server
	{
		listen		3490;
		server_name	krazything;
		location /
		{
			root	html-custom-server-name;
		}
	}

#################################################################

	server
	{
		listen		3491;
		server_name	localhost-3491;
		location /
		{
			root   html-3491;
			index  index.html index.htm;
		}
	}

#################################################################

#	This is THE minimal server.
#	No "location" nor "redirect", so it is forbidden 403.

	server
	{
		listen		3492;
	}

#################################################################

	server
	{
		listen		3493;

#			? must be inside location ?
##		list of accepted methods. (*) <- Asterisk will indicate optionals.
#		if ( $request_method !~ ^(GET)$ ) { return 405; }

#		multiple server_name; free-bonus. (*)
		server_name	local-redirect localhost;

#		optional redirect (*)
		return 301 http://localhost:3490/;
	}

#################################################################
# To do:
#
# Demonstrate max_body_size blocking. Large uploads.
# Demo also this:
#	if ( $request_method !~ ^(DELETE)$ ) { return 405; }
#	if ( $request_method !~ ^(GET|POST|DELETE)$ ) { return 405; } # default on nginx
# Directive to setup upload location.

##		error pages (must have defaults if ommited).
#		error_page   500 502 503 504  /50x.html;
##		setup is optional (*)
#		location = /50x.html {
#			root   html;
#		}

#################################################################

	server
	{
		listen 4242;
		root html4242;
		server_name	localhost:4242;
		client_max_body_size 120000000;

#- / must answer to GET request ONLY
		location ~ ^/$
		{
			if ( $request_method !~ ^(GET)$ ) { return 405; }
		}

#- /put_test/* must answer to PUT request and save files to a directory of your choice
# -- not mandatory to implement PUT.
		location /put_test
		{
			if ( $request_method !~ ^(PUT)$ ) { return 405; }
			client_max_body_size 10000000;
			dav_methods PUT;
			root html4242/uploads;
		}

#  (Sequence out of given order to comply configuration.)
#- /post_body must answer anything to POST request with a maxBody of 100
		location /post_body
		{
			if ( $request_method !~ ^(POST)$ ) { return 405; }
			client_max_body_size 100;
		}

#- /directory/ must answer to GET request and the root of it would be the repository YoupiBanane
#  and if no file are requested, it should search for youpi.bad_extension files
		location ~ /directory
		{
#			if ( $request_method !~ ^(GET)$ ) { return 405; }
			rewrite ^/directory(/?.*) /YoupiBanane$1;
#			return 301 http://$server_name/YoupiBanane$request_uri;
		}

		location ~ /YoupiBanane/Yeah/$
		{
			return 404;
		}

#- any file with .bla as extension must answer to POST request by calling the cgi_test executable
		location ~ \.bla$
		{
			if ( $request_method ~ ^(POST)$ ) { return 301 http://$server_name/ubuntu_cgi_tester; }
		}

		location /YoupiBanane/
		{
			dav_methods PUT;
			index youpi.bad_extension;
		}

# Returns 200. Then ubuntu_cgi_tester accused of bad cgi returned size body.
		location /ubuntu_cgi_tester
		{
			include conf/fastcgi.conf;
			fastcgi_param REQUEST_BODY_FILE $request_body_file;
			fastcgi_pass 0.0.0.0:9000;
			return 200;
#			Debug line:
#			return 555 "\t\t\t\t(webserv) 555 Not allowed but running the right block.\n";
		}
	}
}
